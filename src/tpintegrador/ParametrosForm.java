/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tpintegrador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author facuu
 */
public class ParametrosForm extends javax.swing.JFrame {
    private int conmutacion;
    private Proceso ejecutando;

    /**
     * Creates new form ParametrosForm
     */
    public ParametrosForm() {
        this.simulacion = new SimulacionForm(this);
        this.simulacion.setLocationRelativeTo(null);
        initComponents();
        this.quantumTField.setVisible(false);
        this.jLabelQuantum.setVisible(false);
        this.setTmrt(0);
        this.desocupada = 0;
        this.setLocationRelativeTo(null);
        this.conmutacion = 0;
        this.tiempoConmutacion = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cargarArchivo = new javax.swing.JButton();
        rutaArchivo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        comboEstrategia = new javax.swing.JComboBox();
        jLabelQuantum = new javax.swing.JLabel();
        quantumTField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tipTField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfpTField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tcpTField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cargarArchivo.setText("Cargar");
        cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoActionPerformed(evt);
            }
        });

        rutaArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaArchivoActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Tiempo de arribo", "Rafagas de CPU", "Duracion rafaga CPU", "Duracion rafaga I/O", "Prioridad"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Estrategia:");

        comboEstrategia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Come First Served", "Prioridad Externa", "Round Robin", "Shortest Process Next", "Shortest Remaining Time Next" }));
        comboEstrategia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEstrategiaActionPerformed(evt);
            }
        });

        jLabelQuantum.setText("Quantum:");

        quantumTField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantumTFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("TIP:");

        jLabel4.setText("TFP:");

        jLabel5.setText("TCP:");

        jButton2.setText("Simular");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cargarArchivo)
                                    .addGap(18, 18, 18)
                                    .addComponent(rutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboEstrategia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tipTField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(94, 94, 94)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfpTField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelQuantum)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantumTField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(64, 64, 64))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tcpTField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarArchivo)
                    .addComponent(rutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboEstrategia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelQuantum)
                    .addComponent(quantumTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tipTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tfpTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(tcpTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoActionPerformed
        this.l_terminados.clear();
        this.clearJTable();
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter(".txt","txt");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        
        File f = chooser.getSelectedFile(); 
        String filename = f.getAbsolutePath();
        this.rutaArchivo.setText(filename);
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(f);
            br = new BufferedReader(fr);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ParametrosForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        String lineas = "";
        try {
            while( ( lineas = br.readLine()) != null) {
                StringTokenizer toke = new StringTokenizer(lineas,";");
                Proceso p = new Proceso();
                int i=0;
                while(toke.hasMoreTokens()){
                    switch (i){
                        case 0: p.setNombre(toke.nextToken());
                        break;
                        case 1: p.setArribo(Integer.parseInt(toke.nextToken()));
                        break;
                        case 2: p.setCant_rafaga_cpu(Integer.parseInt(toke.nextToken()));
                        break;
                        case 3: p.setDuracion_rafaga_cpu(Integer.parseInt(toke.nextToken()));
                        break;
                        case 4: p.setDuracion_rafaga_entrada(Integer.parseInt(toke.nextToken()));
                        break;
                        case 5: p.setPrioridad(Integer.parseInt(toke.nextToken()));
                        break;
                    }
                    i++;                         
                }
                p.calcularUsoCPU();
                this.l_arribos.add(p);
            }
        } catch (IOException ex) {
            Logger.getLogger(ParametrosForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.addRowToJTable(this.l_arribos);
    }//GEN-LAST:event_cargarArchivoActionPerformed

    public Proceso getEjecutando() {
        return ejecutando;
    }

    public void setEjecutando(Proceso ejecutando) {
        this.ejecutando = ejecutando;
    }

    public int getDesocupada() {
        return desocupada;
    }

    public void setDesocupada(int desocupada) {
        this.desocupada = desocupada;
    }

    private void rutaArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaArchivoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        this.simulacion.limpiar();
        this.cargaParametros();
        simulacion.setVisible(true);
        this.setContador(0);
        boolean ejecucion = true;
        boolean conmutando = false;
        while(ejecucion){
            this.simulacion.escribirSeguimiento("Instante de ejecucion: " + this.getContador() + "\n");
            if (!this.l_arribos.isEmpty()) {
                this.comprobarArribo(this.contador);
            }
            if (!this.l_bloqueados.isEmpty()) {
               this.comprobarBloqueados(); 
            }
            this.simulacion.escribirSeguimiento("Bloqueados: " + this.l_bloqueados.size() + "\n");
            if (!(this.conmutacion > 0)) {
                if (!this.l_listos.isEmpty()){
                    //if (!conmutando) {
                        this.ejecutando = this.estrategia.sigProceso(this.l_listos, this);
                    //}                    
                    for (int i = 0; i < this.l_listos.size(); i++) {
                        if (this.l_listos.get(i).getEstado() == "Listo") {
                            this.l_listos.get(i).setT_listo(this.l_listos.get(i).getT_listo()+1);
                        }   
                    }
                    if (this.conmutacion == 0) {   
                        conmutando = false;
                        ejecutando.setRestanteUsoCPU(ejecutando.getRestanteUsoCPU()-1);
                        this.simulacion.escribirSeguimiento("Se ejecuta el proceso: " + ejecutando.getNombre() + "\n");
                        this.simulacion.escribirSeguimiento("Tiempo restante de uso CPU: " + ejecutando.getNombre() + " " + ejecutando.getRestanteUsoCPU() + "\n");
                        if (ejecutando.getRestanteUsoCPU() == 0) {
                            ejecutando.setRestanteBloqueo(ejecutando.getDuracion_rafaga_entrada());
                            ejecutando.setCant_rafaga_cpu(ejecutando.getCant_rafaga_cpu()-1);
                            if (!(ejecutando.getCant_rafaga_cpu() == 0)) {
                                ejecutando.setEstado("Bloqueado");
                                this.l_bloqueados.add(ejecutando);
                                this.simulacion.escribirSeguimiento("Proceso " + ejecutando.getNombre() + " bloqueado" + "\n");
                            }else{
                                ejecutando.setTrp(this.contador - ejecutando.getArribo() + this.getTfp());
                                this.l_terminados.add(ejecutando);
                                this.simulacion.escribirSeguimiento("El proceso " + ejecutando.getNombre() + " termino" + "\n");
                            }
                            this.l_listos.remove(ejecutando);
                        }
                    }else{
                        this.simulacion.escribirSeguimiento("Conmutando procesos..." + "\n");
                        this.setTiempoConmutacion(this.getTiempoConmutacion() + 1);
                        this.setConmutacion(this.getConmutacion()-1);
                        conmutando = true;
                    }
                }else{
                    this.desocupada++;
                    this.simulacion.escribirSeguimiento("CPU Desocupada" + "\n");
                }    
            }else{
                this.simulacion.escribirSeguimiento("Conmutando procesos..." + "\n");
                this.setTiempoConmutacion(this.getTiempoConmutacion() + 1);
                this.setConmutacion(this.getConmutacion()-1);
            }
            
            this.simulacion.escribirSeguimiento("Listos: " + this.l_listos.size() + "\n");
                       
            this.contador++;

            this.simulacion.escribirSeguimiento("Terminados: " + this.l_terminados.size() + "\n");
            this.simulacion.escribirSeguimiento("-------------------------------------------------------------------" + "\n");
            if ((this.l_arribos.isEmpty()) && (this.l_bloqueados.isEmpty()) && (this.l_listos.isEmpty())) {
                this.setTrt(this.contador);
                ejecucion = false;
                this.simulacion.escribirSeguimiento("Instante de ejecucion: " + this.contador + "\n");
                this.simulacion.escribirSeguimiento("Simulacion finalizada!");
            }
        }
        this.mostratResultadosProcesos();
        this.mostrarResultadosTanda();
        this.mostrarResultadosCPU();
    }//GEN-LAST:event_jButton2ActionPerformed

    public int getTiempoConmutacion() {
        return tiempoConmutacion;
    }

    public void setTiempoConmutacion(int tiempoConmutacion) {
        this.tiempoConmutacion = tiempoConmutacion;
    }

    public int getConmutacion() {
        return conmutacion;
    }

    public void setConmutacion(int conmutacion) {
        this.conmutacion = conmutacion;
    }

    private void quantumTFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantumTFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantumTFieldActionPerformed

    private void comboEstrategiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEstrategiaActionPerformed
        if (this.comboEstrategia.getSelectedIndex() == 2) {
            this.quantumTField.setVisible(true);
            this.jLabelQuantum.setVisible(true);
        }else{
            this.quantumTField.setVisible(false);
            this.jLabelQuantum.setVisible(false);
        }
    }//GEN-LAST:event_comboEstrategiaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParametrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParametrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParametrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParametrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParametrosForm().setVisible(true);
            }
        });
    }

    private ArrayList <Proceso> l_terminados = new ArrayList();
    private ArrayList <Proceso> l_arribos = new ArrayList();
    private ArrayList <Proceso> l_listos = new ArrayList();
    private ArrayList <Proceso> l_bloqueados = new ArrayList();
    private int contador;
    private int tip;
    private int tfp;
    private int tcp;
    private int trt;
    private float tmrt;
    private Estrategia estrategia;
    private SimulacionForm simulacion;
    private int desocupada; 
    private int tiempoConmutacion;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarArchivo;
    private javax.swing.JComboBox comboEstrategia;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelQuantum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField quantumTField;
    private javax.swing.JTextField rutaArchivo;
    private javax.swing.JTextField tcpTField;
    private javax.swing.JTextField tfpTField;
    private javax.swing.JTextField tipTField;
    // End of variables declaration//GEN-END:variables

    public ArrayList<Proceso> getL_listos() {
        return l_listos;
    }

    public void setL_listos(ArrayList<Proceso> l_listos) {
        this.l_listos = l_listos;
    }

    public ArrayList<Proceso> getL_bloqueados() {
        return l_bloqueados;
    }

    public void setL_bloqueados(ArrayList<Proceso> l_bloqueados) {
        this.l_bloqueados = l_bloqueados;
    }

    public int getContador() {
        return contador;
    }

    public void setContador(int contador) {
        this.contador = contador;
    }

    public int getTip() {
        return tip;
    }

    public void setTip(int tip) {
        this.tip = tip;
    }

    public int getTfp() {
        return tfp;
    }

    public void setTfp(int tfp) {
        this.tfp = tfp;
    }

    public int getTcp() {
        return tcp;
    }

    public void setTcp(int tcp) {
        this.tcp = tcp;
    }

    public int getTrt() {
        return trt;
    }

    public void setTrt(int trt) {
        this.trt = trt;
    }

    public float getTmrt() {
        return tmrt;
    }

    public ArrayList<Proceso> getL_terminados() {
        return l_terminados;
    }

    public void setL_terminados(ArrayList<Proceso> l_terminados) {
        this.l_terminados = l_terminados;
    }

    public ArrayList<Proceso> getL_arribos() {
        return l_arribos;
    }

    public void setL_arribos(ArrayList<Proceso> l_arribos) {
        this.l_arribos = l_arribos;
    }

    public void setTmrt(float tmrt) {
        this.tmrt = tmrt;
    }

    public JTextField getRutaArchivo() {
        return rutaArchivo;
    }

    public void setRutaArchivo(JTextField rutaArchivo) {
        this.rutaArchivo = rutaArchivo;
    }

    public void setEstrategia(Estrategia estrategia) {
        this.estrategia = estrategia;
    }

    public Estrategia getEstrategia() {
        return estrategia;
    }
    
    public Estrategia cargaEstrategia() {
        int index;
        Estrategia estrategia = null;
        index = this.comboEstrategia.getSelectedIndex();
        switch (index){
            case 0: estrategia = new FCFS();
                break;
            case 1: estrategia = new PrioridadExterna();
                break;
            case 2: estrategia = new RoundRobin(Integer.parseInt(this.quantumTField.getText()), this.l_arribos);
                break;
            case 3: estrategia = new SPN();
                break;
            case 4: estrategia = new SRTN();
                break;
        }
        return estrategia;
    }
    
    public void clearJTable(){
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        int filas = model.getRowCount();
        for (int i = 0; i < filas; i++) {
            model.removeRow(0);
        }
    }
    
    public void addRowToJTable(ArrayList <Proceso> lista){
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        Object rowData[] = new Object[6];
        for (int i = 0; i < (lista.size()); i++) {
            rowData[0] = lista.get(i).getNombre();
            rowData[1] = lista.get(i).getArribo();
            rowData[2] = lista.get(i).getCant_rafaga_cpu();
            rowData[3] = lista.get(i).getDuracion_rafaga_cpu();
            rowData[4] = lista.get(i).getDuracion_rafaga_entrada();
            rowData[5] = lista.get(i).getPrioridad();
            model.addRow(rowData);
        }
    }
    
    
    public void cargaParametros(){
        this.setEstrategia(this.cargaEstrategia());
        this.simulacion.escribirSeguimiento("Estrategia: " + this.estrategia.getTipo() + "\n");
        for (int i = 0; i < this.l_arribos.size(); i++) {
            this.l_arribos.get(i).setTiempoServicio(this.l_arribos.get(i).getCant_rafaga_cpu() * this.l_arribos.get(i).getDuracion_rafaga_cpu());
            
        }
        this.setTcp(Integer.parseInt(this.tcpTField.getText()));
        this.setTfp(Integer.parseInt(this.tfpTField.getText()));
        this.setTip(Integer.parseInt(this.tipTField.getText()));
        
        this.simulacion.escribirSeguimiento("Parametros cargados" + "\n");
    }

    private void comprobarArribo(int contador) {
        for (int i = 0; i < this.l_arribos.size(); i++) {
            if ((this.l_arribos.get(i).getArribo() + this.tip) == contador) {
                this.l_arribos.get(i).setEstado("Listo");
                this.l_arribos.get(i).setRestanteUsoCPU(this.l_arribos.get(i).getDuracion_rafaga_cpu());
                this.l_listos.add(this.l_arribos.get(i));
                this.simulacion.escribirSeguimiento("El proceso " + this.l_arribos.get(i).getNombre() + " fue aceptado" + "\n");
            }
        }
        
        this.l_arribos.removeIf(x -> (x.getArribo() + this.getTip()) == contador); 
        this.simulacion.escribirSeguimiento("Arribos comprobados" + "\n");
    }

    private void comprobarBloqueados() {
        for (int i = 0; i < this.l_bloqueados.size(); i++) {
            if ((this.l_bloqueados.get(i).getRestanteBloqueo() == 0)) {
                this.l_bloqueados.get(i).setRestanteUsoCPU(this.l_bloqueados.get(i).getDuracion_rafaga_cpu());
                this.l_bloqueados.get(i).setEstado("Listo");
                if (this.estrategia.getTipo() == "Round Robin") {
                    RoundRobin estra = (RoundRobin)this.estrategia;
                    if ((this.l_bloqueados.get(i).getRestanteUsoCPU()) < (estra.getQuantum())) {
                        this.l_bloqueados.get(i).setRestanteQuantum(this.l_bloqueados.get(i).getRestanteUsoCPU());
                    }else{
                        this.l_bloqueados.get(i).setRestanteQuantum(estra.getQuantum());
                    }
                }
                this.l_listos.add(this.l_bloqueados.get(i));   
                this.simulacion.escribirSeguimiento("El proceso " + " " + this.l_bloqueados.get(i).getNombre() + " paso de bloqueado a listo" + "\n");
            }      
        }
        
        this.l_bloqueados.removeIf(x -> x.getRestanteBloqueo() == 0);
        for (int i = 0; i < this.l_bloqueados.size(); i++) {
            this.l_bloqueados.get(i).setRestanteBloqueo(this.l_bloqueados.get(i).getRestanteBloqueo()-1);
        }
        this.simulacion.escribirSeguimiento("Bloqueados comprobados" + "\n");
    }

    private void mostratResultadosProcesos() {
        for (int i = 0; i < this.l_terminados.size(); i++) {
            this.l_terminados.get(i).setTrn((float)(this.l_terminados.get(i).getTr()) / (this.l_terminados.get(i).getTiempoServicio()));
            this.simulacion.escribirResProceso("Proceso: " + this.l_terminados.get(i).getNombre() + "\n");
            this.simulacion.escribirResProceso("El Tiempo de Retorno es: " + this.l_terminados.get(i).getTr() + "\n");
            this.simulacion.escribirResProceso("El Tiempo de Retorno Normalizado es: " + this.l_terminados.get(i).getTrn() + "\n");
            this.simulacion.escribirResProceso("El Tiempo en estado de listo es: " + this.l_terminados.get(i).getT_listo() + "\n");
            this.simulacion.escribirResProceso("-----------------------------------------------------------------" + "\n");
        }
    }

    private void mostrarResultadosTanda() {
        int menor = 0;
        if (this.l_terminados.size() > 1) {
            Proceso proceso = this.l_terminados.get(0);
            for (int i = 1; i < this.l_terminados.size(); i++) {
                if (proceso.getArribo() > this.l_terminados.get(i).getArribo()) {
                    menor = i;
                }
            }
        }   
        for (int i = 0; i < this.l_terminados.size(); i++) {
            this.setTmrt((float)(this.l_terminados.get(i).getTr() + this.getTmrt() + this.l_terminados.get(i).getArribo() + 1 - this.l_terminados.get(menor).getArribo()));
        }
        this.setTmrt(this.getTmrt() / this.l_terminados.size());    
        int aux = this.contador - this.l_terminados.get(menor).getArribo();
        this.simulacion.escribirResTanda("El Tiempo de Retorno es: " + aux + "\n");
        this.simulacion.escribirResTanda("El Tiempo Medio de Retorno es: " + this.getTmrt() + "\n");
    }

    private void mostrarResultadosCPU() {
        DecimalFormat formato = new DecimalFormat("#.0");
        float aux1 = ((float)this.desocupada / (float)this.contador) * 100; 
        this.simulacion.escribirResCPU("El tiempo de la CPU desocupada es: " + this.desocupada + " instantes o " + formato.format(aux1) + "%" + "\n");
        for (int i = 0; i < this.l_terminados.size(); i++) {
            float aux = 0;
            int instantes = 0;
            instantes = this.l_terminados.get(i).getUsoCPU();
            aux = ((float) this.l_terminados.get(i).getUsoCPU() /  (float) this.contador) * 100;
            this.simulacion.escribirResCPU("Uso de CPU del proceso " + this.l_terminados.get(i).getNombre() + ": " + instantes + " instantes"  + " o " + formato.format(aux) + "%\n");
        }

        aux1 = ((float)this.tiempoConmutacion / (float)this.contador) * 100;
        this.simulacion.escribirResCPU("El tiempo de conmutacion es de: " + this.getTiempoConmutacion() + " instantes o " + formato.format(aux1) + "%\n");
    }
    
    public void limpiarJTable(){
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        int a = this.jTable1.getRowCount()-1;
        for (int i = a; i >= 0; i--) {           
            model.removeRow(model.getRowCount()-1);
        } 
    }
}
